/*----- PROTECTED REGION ID(SpecBoardInterface.h) ENABLED START -----*/
//=============================================================================
//
// file :        SpecBoardInterface.h
//
// description : Include file for the SpecBoardInterface class
//
// project :     Simple PCI FMC Carrier (SPEC) Tango DS interface
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef SpecBoardInterface_H
#define SpecBoardInterface_H

#include <tango.h>


/*----- PROTECTED REGION END -----*/	//	SpecBoardInterface.h

/**
 *  SpecBoardInterface class description:
 *    The Simple PCIe FMC carrier (SPEC) board is a FPGA based board with SFP connector and PCIe interface (throw the Gennum GN4124 chip bridge). It is under CERN Open Hardware License (CERN OHL v1.2).
 *    The SPEC board can hold one FMC card for ADC, DAC, DIO... It can also be used as a standard node for the White Rabbit system.
 *    Check the web page http://www.ohwr.org/projects/spec/wiki for full documentation and sources.
 *    
 *    This class is a simple basic interface for the SPEC board. It allows to:
 *      * load the FPGA bitstream
 *      * read/write registers of the user and gn4124 cores.
 *    
 *    You will need the libspec library to build and run this class:
 *      * git clone git@ohwr.org:fmc-projects/spec/spec-sw.git
 *      * cd spec-sw/tools
 *      * make
 *      * libspec.a and libspec.so are available
 */

namespace SpecBoardInterface_ns
{
/*----- PROTECTED REGION ID(SpecBoardInterface::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	SpecBoardInterface::Additional Class Declarations

class SpecBoardInterface : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(SpecBoardInterface::Data Members) ENABLED START -----*/

//	Add your own data members
private:
	bool specFound;
	bool bitfileExist;
	uint32_t valueToWrite;

/*----- PROTECTED REGION END -----*/	//	SpecBoardInterface::Data Members


//	Attribute data members
public:
	Tango::DevShort	*attr_barArea_read;
	Tango::DevString	*attr_bitfile_read;
	Tango::DevULong	*attr_readAddress_read;
	Tango::DevULong	*attr_writeAddress_read;
	Tango::DevULong	*attr_readValue_read;
	Tango::DevULong	*attr_sizeReadBlock_read;
	Tango::DevULong	*attr_readRegisterBlock_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SpecBoardInterface(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	SpecBoardInterface(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	SpecBoardInterface(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~SpecBoardInterface() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : SpecBoardInterface::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : SpecBoardInterface::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute barArea related methods
 *	Description: This is the PCIe BAR area on which you want read/write registers.
 *               BAR0 :FPGA Whishbone bus registers. Access internal FPGA embedded system.
 *               BAR4 :GN4124 control registers. Access system control as boot mode or loading FPGA bitstream.
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
	virtual void read_barArea(Tango::Attribute &attr);
	virtual void write_barArea(Tango::WAttribute &attr);
	virtual bool is_barArea_allowed(Tango::AttReqType type);
/**
 *	Attribute bitfile related methods
 *	Description: Path of the bitstream to load in the FPGA.
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_bitfile(Tango::Attribute &attr);
	virtual void write_bitfile(Tango::WAttribute &attr);
	virtual bool is_bitfile_allowed(Tango::AttReqType type);
/**
 *	Attribute readAddress related methods
 *	Description: Address of the register to read
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_readAddress(Tango::Attribute &attr);
	virtual void write_readAddress(Tango::WAttribute &attr);
	virtual bool is_readAddress_allowed(Tango::AttReqType type);
/**
 *	Attribute writeAddress related methods
 *	Description: Address of the register to write
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_writeAddress(Tango::Attribute &attr);
	virtual void write_writeAddress(Tango::WAttribute &attr);
	virtual bool is_writeAddress_allowed(Tango::AttReqType type);
/**
 *	Attribute readValue related methods
 *	Description: Value read at readAddress
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_readValue(Tango::Attribute &attr);
	virtual bool is_readValue_allowed(Tango::AttReqType type);
/**
 *	Attribute writeValue related methods
 *	Description: Value to write at writeAddress
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void write_writeValue(Tango::WAttribute &attr);
	virtual bool is_writeValue_allowed(Tango::AttReqType type);
/**
 *	Attribute sizeReadBlock related methods
 *	Description: Size of the register block to read (number of registers to read).
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_sizeReadBlock(Tango::Attribute &attr);
	virtual void write_sizeReadBlock(Tango::WAttribute &attr);
	virtual bool is_sizeReadBlock_allowed(Tango::AttReqType type);
/**
 *	Attribute readRegisterBlock related methods
 *	Description: This spectrum contains the values of a block of registers.
 *               The block starts at address readAddress and reads next registers until sizeReadBlock is reached.
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Spectrum max = 65536
 */
	virtual void read_readRegisterBlock(Tango::Attribute &attr);
	virtual bool is_readRegisterBlock_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : SpecBoardInterface::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command ReadRegister related method
	 *	Description: Read a register of the barArea (whishbone or gn4124) at the address readAddress (barArea base_address + offset).
	 *               Registers are 32 bits wide.
	 *
	 */
	virtual void read_register();
	virtual bool is_ReadRegister_allowed(const CORBA::Any &any);
	/**
	 *	Command ReadRegisterBlock related method
	 *	Description: Read a block of registers in the barArea (whishbone or gn4124).
	 *               The block starts at the address readAddress (barArea base_address + offset) and reads next registers until sizeReadBlock is reached.
	 *               Registers are 32 bits wide.
	 *
	 */
	virtual void read_register_block();
	virtual bool is_ReadRegisterBlock_allowed(const CORBA::Any &any);
	/**
	 *	Command WriteRegister related method
	 *	Description: Write writeValue in a register of the barArea (whisbone or gn4124) at the address writeAddress (barArea base_address + offset).
	 *               Registers are 32 bits wide.
	 *
	 */
	virtual void write_register();
	virtual bool is_WriteRegister_allowed(const CORBA::Any &any);
	/**
	 *	Command LoadBitstream related method
	 *	Description: Load the bitstream bitfile in the FPGA.
	 *               The bitfile must be the full path (/full/path/bitstream.bit) of the bitstream.
	 *               The barArea attribute is ignored because this command obviously uses the BAR4 area dedicated to the GN4124 for programming the FPGA.
	 *
	 */
	virtual void load_bitstream();
	virtual bool is_LoadBitstream_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : SpecBoardInterface::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(SpecBoardInterface::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	void checkBarAreaEnumLabelsProperty(void);
	void specReadRegister(void *map_base, uint32_t address, uint32_t *val);
	void specWriteRegister(void *map_base, uint32_t address, uint32_t val);

/*----- PROTECTED REGION END -----*/	//	SpecBoardInterface::Additional Method prototypes
};

/*----- PROTECTED REGION ID(SpecBoardInterface::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	SpecBoardInterface::Additional Classes Definitions

}	//	End of namespace

#endif   //	SpecBoardInterface_H
